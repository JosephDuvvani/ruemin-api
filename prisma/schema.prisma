// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid())
  username         String        @unique
  password         String
  profile          Profile?
  inbox            Chat[]        @relation("Chats")
  sentRequests     Request[]     @relation("RequestSender")
  receivedRequests Request[]     @relation("RequestReceiver")
  createdAt        DateTime      @default(now())
  ChatMessage      ChatMessage[]
}

model Profile {
  id        String  @id @default(uuid())
  imageUrl  String?
  firstname String
  lastname  String?
  bio       Json?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @unique
}

model Token {
  id  String @id @default(uuid())
  jwt String @unique
}

model Chat {
  id        String        @id @default(uuid())
  messages  ChatMessage[]
  users     User[]        @relation("Chats")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model ChatMessage {
  id       String   @id @default(uuid())
  content  String
  sentAt   DateTime @default(now())
  chatId   String
  senderId String
  chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender   User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Request {
  id         String @id @default(uuid())
  sender     User   @relation("RequestSender", fields: [senderId], references: [id])
  senderId   String
  receiver   User   @relation("RequestReceiver", fields: [receiverId], references: [id])
  receiverId String
}
